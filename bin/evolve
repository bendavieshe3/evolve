#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'evolve'
rescue LoadError => l
  STDERR.puts l.message
  STDERR.puts "In development, you need to use `bundle exec bin/evolve` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/evolve now"
  exit 64
end

include GLI::App

program_desc 'A program simlulating an evolutionary process in a population'

version Evolve::VERSION

desc 'Show information messages about the simulation'
switch [:i,:info]

#desc 'Describe some switch here'
#switch ["s",:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'Execute a number of iterations of life within the population'
arg_name 'saved_simulation_file.evolve'
command :play do |c|
  
  c.action do |global_options,options,args|

    #puts global_options
    #puts options

    # Your command logic here
    s = Simulation.new
    s.attach_listener Listeners::ConsoleListener.new(
        logging_level: global_options[:logging_level]
        )
    s.initialize_world

    s.simulate(10)
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

  end
end

desc 'Execute a number of iterations of life within the population'
arg_name 'Describe arguments to play here'
command :example do |c|
  c.desc 'Describe a switch to play'
  c.switch :s

  c.desc 'Describe a flag to play'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "play command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  # Set defaults
  @defaults = {
    logging_level: Listeners::STATUS
  }

  # Interpret Parameters
  if global[:info]
    global[:logging_level] = Listeners::INFO
  end

  # apply defaults
  @defaults.each do | k,v |
    global[k] = v unless global[k]
  end 

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  exception.backtrace.each do |trace|
    STDERR.puts trace
  end
  true
end

exit run(ARGV)
